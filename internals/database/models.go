// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type GenderEnum string

const (
	GenderEnumMale   GenderEnum = "male"
	GenderEnumFemale GenderEnum = "female"
)

func (e *GenderEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenderEnum(s)
	case string:
		*e = GenderEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for GenderEnum: %T", src)
	}
	return nil
}

type NullGenderEnum struct {
	GenderEnum GenderEnum
	Valid      bool // Valid is true if GenderEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenderEnum) Scan(value interface{}) error {
	if value == nil {
		ns.GenderEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GenderEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenderEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GenderEnum), nil
}

type NurserySubjectScoreEnum string

const (
	NurserySubjectScoreEnumA NurserySubjectScoreEnum = "A"
	NurserySubjectScoreEnumB NurserySubjectScoreEnum = "B"
	NurserySubjectScoreEnumC NurserySubjectScoreEnum = "C"
	NurserySubjectScoreEnumD NurserySubjectScoreEnum = "D"
)

func (e *NurserySubjectScoreEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NurserySubjectScoreEnum(s)
	case string:
		*e = NurserySubjectScoreEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for NurserySubjectScoreEnum: %T", src)
	}
	return nil
}

type NullNurserySubjectScoreEnum struct {
	NurserySubjectScoreEnum NurserySubjectScoreEnum
	Valid                   bool // Valid is true if NurserySubjectScoreEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNurserySubjectScoreEnum) Scan(value interface{}) error {
	if value == nil {
		ns.NurserySubjectScoreEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NurserySubjectScoreEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNurserySubjectScoreEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NurserySubjectScoreEnum), nil
}

type RolesEnum string

const (
	RolesEnumTeacher    RolesEnum = "teacher"
	RolesEnumAccountant RolesEnum = "accountant"
	RolesEnumAdmin      RolesEnum = "admin"
	RolesEnumStudent    RolesEnum = "student"
)

func (e *RolesEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RolesEnum(s)
	case string:
		*e = RolesEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for RolesEnum: %T", src)
	}
	return nil
}

type NullRolesEnum struct {
	RolesEnum RolesEnum
	Valid     bool // Valid is true if RolesEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRolesEnum) Scan(value interface{}) error {
	if value == nil {
		ns.RolesEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RolesEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRolesEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RolesEnum), nil
}

type SectionEnum string

const (
	SectionEnumPrimarySection SectionEnum = "Primary Section"
	SectionEnumNurserySection SectionEnum = "Nursery Section"
)

func (e *SectionEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SectionEnum(s)
	case string:
		*e = SectionEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for SectionEnum: %T", src)
	}
	return nil
}

type NullSectionEnum struct {
	SectionEnum SectionEnum
	Valid       bool // Valid is true if SectionEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSectionEnum) Scan(value interface{}) error {
	if value == nil {
		ns.SectionEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SectionEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSectionEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SectionEnum), nil
}

type TermEnum string

const (
	TermEnumFirstTerm  TermEnum = "First Term"
	TermEnumSecondTerm TermEnum = "Second Term"
	TermEnumThirdTerm  TermEnum = "Third Term"
)

func (e *TermEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TermEnum(s)
	case string:
		*e = TermEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for TermEnum: %T", src)
	}
	return nil
}

type NullTermEnum struct {
	TermEnum TermEnum
	Valid    bool // Valid is true if TermEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTermEnum) Scan(value interface{}) error {
	if value == nil {
		ns.TermEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TermEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTermEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TermEnum), nil
}

type Class struct {
	ID             pgtype.UUID
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	TermID         pgtype.UUID
	ClassID        pgtype.UUID
	ClassTeacherID pgtype.UUID
}

type ClassList struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Name      string
	Section   SectionEnum
}

type NurSubjectsQuestion struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	SubjectID pgtype.UUID
	Question  string
}

type NurseryFirstTermResult struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	StudentID pgtype.UUID
	ClassID   pgtype.UUID
}

type NurseryFirstTermSubjectScore struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	ResultID   pgtype.UUID
	SubjectID  pgtype.UUID
	Score      NurserySubjectScoreEnum
	QuestionID pgtype.UUID
}

type NurserySecondTermResult struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	StudentID pgtype.UUID
	ClassID   pgtype.UUID
}

type NurserySecondTermSubjectScore struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	ResultID   pgtype.UUID
	SubjectID  pgtype.UUID
	Score      NurserySubjectScoreEnum
	QuestionID pgtype.UUID
}

type NurseryThirdTermResult struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	StudentID pgtype.UUID
	ClassID   pgtype.UUID
}

type NurseryThirdTermSubjectScore struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	ResultID   pgtype.UUID
	SubjectID  pgtype.UUID
	Score      NurserySubjectScoreEnum
	QuestionID pgtype.UUID
}

type PrimaryFirstTermResult struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	StudentID pgtype.UUID
	ClassID   pgtype.UUID
}

type PrimaryFirstTermSubjectScore struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	ResultID   pgtype.UUID
	SubjectID  pgtype.UUID
	Test2Score int64
	Test3Score int64
	Test4Score int64
	ExamScore  int64
	Test1Score int64
}

type PrimarySecondTermResult struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	StudentID pgtype.UUID
	ClassID   pgtype.UUID
}

type PrimarySecondTermSubjectScore struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	ResultID   pgtype.UUID
	SubjectID  pgtype.UUID
	Test2Score int64
	Test3Score int64
	Test4Score int64
	ExamScore  int64
	Test1Score int64
}

type PrimaryThirdTermResult struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	StudentID pgtype.UUID
	ClassID   pgtype.UUID
}

type PrimaryThirdTermSubjectScore struct {
	ID         pgtype.UUID
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	ResultID   pgtype.UUID
	SubjectID  pgtype.UUID
	Test2Score int64
	Test3Score int64
	Test4Score int64
	ExamScore  int64
	Test1Score int64
}

type Session struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Name      string
}

type StaffProfile struct {
	ID             pgtype.UUID
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	FirstName      string
	MiddleName     string
	LastName       string
	Passport       string
	DateOfBirth    pgtype.Date
	Gender         GenderEnum
	AdmissionNo    int64
	Role           RolesEnum
	TermID         pgtype.UUID
	JoiningDate    pgtype.Timestamp
	Active         bool
	PasswordChange bool
	PhoneNo        string
}

type StudentProfile struct {
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	FirstName      string
	MiddleName     string
	LastName       string
	Passport       string
	DateOfBirth    pgtype.Date
	Gender         GenderEnum
	ID             pgtype.UUID
	AdmissionNo    int64
	JoinedClassID  pgtype.UUID
	CurrentClassID pgtype.UUID
	JoiningDate    pgtype.Timestamp
	PasswordChange bool
	Active         bool
}

type Subject struct {
	ID          pgtype.UUID
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	TermClassID pgtype.UUID
	SubjectID   pgtype.UUID
	TeacherID   pgtype.UUID
}

type SubjectList struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Name      string
}

type Term struct {
	ID                 pgtype.UUID
	CreatedAt          pgtype.Timestamp
	UpdatedAt          pgtype.Timestamp
	SessionID          pgtype.UUID
	TermID             TermEnum
	VacationDate       pgtype.Timestamp
	NextResumptionDate pgtype.Timestamp
	NumberSchoolOpened pgtype.Int8
	Lock               bool
}
