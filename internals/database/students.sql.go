// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: students.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllStudent = `-- name: GetAllStudent :many
SELECT
    student_profiles.created_at, student_profiles.updated_at, student_profiles.first_name, student_profiles.middle_name, student_profiles.last_name, student_profiles.passport, student_profiles.date_of_birth, student_profiles.gender, student_profiles.id, student_profiles.admission_no, student_profiles.joined_class_id, student_profiles.current_class_id, student_profiles.joining_date, student_profiles.password_change, student_profiles.active,
    sessions.name || ' - ' || terms.term_id || ' - ' || class_list.name AS current_class
FROM student_profiles
LEFT JOIN classes ON student_profiles.current_class_id = classes.id
LEFT JOIN class_list ON classes.class_id = class_list.id
LEFT JOIN terms ON classes.term_id = terms.id
LEFT JOIN sessions ON terms.session_id = sessions.id
ORDER BY student_profiles.admission_no DESC
LIMIT $1 OFFSET $2
`

type GetAllStudentParams struct {
	Limit  int32
	Offset int32
}

type GetAllStudentRow struct {
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	FirstName      string
	MiddleName     string
	LastName       string
	Passport       string
	DateOfBirth    pgtype.Date
	Gender         GenderEnum
	ID             pgtype.UUID
	AdmissionNo    int64
	JoinedClassID  pgtype.UUID
	CurrentClassID pgtype.UUID
	JoiningDate    pgtype.Timestamp
	PasswordChange bool
	Active         bool
	CurrentClass   interface{}
}

func (q *Queries) GetAllStudent(ctx context.Context, arg GetAllStudentParams) ([]GetAllStudentRow, error) {
	rows, err := q.db.Query(ctx, getAllStudent, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllStudentRow
	for rows.Next() {
		var i GetAllStudentRow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Passport,
			&i.DateOfBirth,
			&i.Gender,
			&i.ID,
			&i.AdmissionNo,
			&i.JoinedClassID,
			&i.CurrentClassID,
			&i.JoiningDate,
			&i.PasswordChange,
			&i.Active,
			&i.CurrentClass,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
